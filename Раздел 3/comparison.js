true === true; // true
true !== true; // false
true === false; // false
true !== false; // true

"Строка" === 'Строка'; true
'Строка' === `Строка`; true
"Строка" === `Строка`; true

"Строка" === 'Строка' === `Строка`; // false, важен порядок вычислений

'Строка1' !== 'Строка2'; // true

// === и !== всегда вернет false при сравнении значений разных типов
false !== 0;
true !== 1;
0 !== '';
3 !== '3'; // Вот это поворот
false !== '';
true !== 'true';

// Сравнение строк происходит посимвольно по кодам символа, условно "По алфавиту"
'z' > 'a'; // 122 > 97
'az' > 'axzzz'; // a === a, z > a, дальше не проверяем
'z' > 'Z'; 122 > 90
'10' < '5'; // Вот так сюрприз
'10' > '05'; // А вот теперь все на своих местах

// Сравнение строк и чисел
'10' > 5; // true
10 > '5'; // true
10 > 'x'; // false, 'x' не число (NaN)
10 < 'x'; // false, 'x' не число (NaN)

// Сравнение с boolean всегда сводятся к сравнению чисел
// true - 1, false - 0
1 > false; // true, 1 > 0
0 < true; // true, 0 < 1
'10' > true; // true, 10 > 1
'1' > true; // true, 1 > 1
'1' > false; // false, 1 > 0
'x' > true; // false, NaN > 1

